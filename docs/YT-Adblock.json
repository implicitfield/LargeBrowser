[
    {
        "trigger": {
            "url-filter": ".*",
            "if-domain": ["*youtube.com", "*youtube-nocookie.com"]
        },
        "action": {
            "type": "execute-script",
            "payload": "
            function jsonPrune(rawPrunePathsInput) {
                const log = console.log.bind(console);
                const rawPrunePaths = rawPrunePathsInput;
                const prunePaths = rawPrunePaths.split(/ +/);
                const findOwner = function(root, path) {
                    let owner = root;
                    let chain = path;
                    for (;;) {
                        if ( owner instanceof Object === false ) { return; }
                        const pos = chain.indexOf('.');
                        if ( pos === -1 ) {
                            return owner.hasOwnProperty(chain)
                                ? [ owner, chain ]
                                : undefined;
                        }
                        const prop = chain.slice(0, pos);
                        if ( owner.hasOwnProperty(prop) === false ) { return; }
                        owner = owner[prop];
                        chain = chain.slice(pos + 1);
                    }
                };
                const mustProcess = function(root) {
                    return true;
                };
                JSON.parse = new Proxy(JSON.parse, {
                    apply: function() {
                        const r = Reflect.apply(...arguments);
                        if ( prunePaths.length === 0 ) {
                            log(location.hostname, r);
                            return r;
                        }
                        if ( mustProcess(r) === false ) { return r; }
                        for ( const path of prunePaths ) {
                            const details = findOwner(r, path);
                            if ( details !== undefined ) {
                                delete details[0][details[1]];
                            }
                        }
                        return r;
                    },
                });
            };
            function wrapPropertyAccess(object, property, descriptor)
            {
              let dotIndex = property.indexOf('.');
              if (dotIndex == -1)
              {
                // simple property case.
                let currentDescriptor = Object.getOwnPropertyDescriptor(object, property);
                if (currentDescriptor && !currentDescriptor.configurable)
                  return;

                // Keep it configurable because the same property can be wrapped via
                // multiple snippet filters (#7373).
                let newDescriptor = Object.assign({}, descriptor, {configurable: true});

                if (!currentDescriptor && !newDescriptor.get && newDescriptor.set)
                {
                  let propertyValue = object[property];
                  newDescriptor.get = () => propertyValue;
                }

                Object.defineProperty(object, property, newDescriptor);
                return;
              }

              let name = property.slice(0, dotIndex);
              property = property.slice(dotIndex + 1);
              let value = object[name];
              if (value && (typeof value == 'object' || typeof value == 'function'))
                wrapPropertyAccess(value, property, descriptor);

              let currentDescriptor = Object.getOwnPropertyDescriptor(object, name);
              if (currentDescriptor && !currentDescriptor.configurable)
                return;

              let setter = newValue =>
              {
                value = newValue;
                if (newValue && (typeof newValue == 'object' || typeof value == 'function'))
                  wrapPropertyAccess(newValue, property, descriptor);
              };

              Object.defineProperty(object, name, {
                get: () => value,
                set: setter,
                configurable: true
              });
            }

            function overridePropertyRead(property, value)
            {
              let cValue;

              if (value === 'false')
              {
                cValue = false;
              }
              else if (value === 'true')
              {
                cValue = true;
              }
              else if (value === 'null')
              {
                cValue = null;
              }
              else if (value === 'noopFunc')
              {
                cValue = () => {};
              }
              else if (value === 'trueFunc')
              {
                cValue = () => true;
              }
              else if (value === 'falseFunc')
              {
                cValue = () => false;
              }
              else if (value === '')
              {
                cValue = value;
              }

              let newGetter = () =>
              {
                return cValue;
              };

              wrapPropertyAccess(window, property, {get: newGetter, set() {}});
            }
            jsonPrune('[].playerResponse.adPlacements [].playerResponse.playerAds playerResponse.adPlacements playerResponse.playerAds adPlacements playerAds');
            overridePropertyRead('ytInitialPlayerResponse.adPlacements', undefined);
            overridePropertyRead('playerResponse.adPlacements', undefined);
        "
        }
    }
]
